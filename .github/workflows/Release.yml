name: Android Release

on:
  schedule:
    - cron: '0 0 * * 0'   # Weekly on Sunday at 00:00 UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION_NAME: "1.0"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/wrapper
          key: gradle-wrapper-${{ runner.os }}-v${{ env.VERSION_NAME }}
          restore-keys: |
            gradle-wrapper-${{ runner.os }}-

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/caches/modules-2
            ~/.gradle/caches/journal-1
          key: gradle-deps-${{ runner.os }}-v${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-deps-${{ runner.os }}-

      - name: Setup JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 23

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Configure Gradle Properties
        run: |
          echo "android.useAndroidX=true" >> gradle.properties
          echo "android.enableJetifier=true" >> gradle.properties
          echo "org.gradle.jvmargs=-Xmx8g -Dfile.encoding=UTF-8 -XX:+UseParallelGC" >> gradle.properties
          echo "android.enableR8.fullMode=true" >> gradle.properties
          echo "org.gradle.daemon=true" >> gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties
          echo "org.gradle.configureondemand=true" >> gradle.properties
          echo "android.enableBuildCache=true" >> gradle.properties

      - name: Grant Execute Permission
        run: chmod +x ./gradlew

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Run Android Lint
        run: ./gradlew lintRelease

      - name: Run SpotBugs & Checkstyle
        run: |
          ./gradlew spotbugsMain checkstyleMain

      - name: Set up Android Emulator
        uses: android-actions/setup-android@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          cache: true

      - name: Start AVD
        run: |
          echo "no" | avdmanager create avd -n test_avd -k "system-images;android-30;google_apis;x86_64" --force
          nohup emulator -avd test_avd -no-window -no-audio -no-snapshot &

      - name: Wait for Emulator
        run: |
          adb wait-for-device
          adb shell getprop sys.boot_completed | grep -m 1 '1'

      - name: Run Instrumented Tests
        run: ./gradlew connectedAndroidTest

      - name: Build Release APK
        env:
          RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Build Release AAB
        env:
          RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: ./gradlew bundleRelease

      - name: Clean Up Old Artifacts
        run: rm -rf release-artifacts/* || echo "No artifacts to remove"

      - name: Rename APK & AAB Files
        run: |
          mkdir -p release-artifacts
          cp app/build/outputs/apk/release/*.apk release-artifacts/Ktimaz_Studio_Release_v${{ env.VERSION_NAME }}.apk
          cp app/build/outputs/bundle/release/*.aab release-artifacts/Ktimaz_Studio_Release_v${{ env.VERSION_NAME }}.aab

      - name: Check Last Release Date
        id: release_check
        run: |
          LAST=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.published_at // empty')
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "last_release=$LAST" >> $GITHUB_ENV
          echo "now=$NOW" >> $GITHUB_ENV
          if [[ -z "$LAST" ]]; then
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            NOW_TS=$(date -u -d "$NOW" +"%s")
            LAST_TS=$(date -u -d "$LAST" +"%s")
            DIFF_SEC=$((NOW_TS - LAST_TS))
            DAYS=$((DIFF_SEC / 86400))
            if [[ $DAYS -ge 7 ]]; then
              echo "ready=true" >> $GITHUB_OUTPUT
            else
              echo "ready=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Publish GitHub Release
        if: steps.release_check.outputs.ready == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: "KTIMAZ Studio v${{ env.VERSION_NAME }}"
          tag_name: "v${{ env.VERSION_NAME }}-${{ github.run_number }}"
          files: release-artifacts/*.apk,release-artifacts/*.aab
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: junit-reports
          path: app/build/reports/tests

      - name: Upload Lint Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-report
          path: app/build/reports/lint-results.html

      - name: Upload SpotBugs/Checkstyle Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis-reports
          path: |
            app/build/reports/spotbugs
            app/build/reports/checkstyle

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,name,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
